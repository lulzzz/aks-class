How to give the Demo on AKS and Azure Policy?
--------------------------------------------------
What is Azure Policy for AKS?
Azure Policy is a new feature which allows you to extend Azure Policy beyond supporting just Azure resources and apply policies inside your AKS cluster as well.
Azure Policy for AKS builds on top of two open-source projects:
Open Policy Agent providing the policy engine
 - Gatekeeper providing the validating webhook to apply these policies
 - Using these projects, Kubernetes can validate all workloads as they are deployed into the cluster. If these resources don't meet the requirements of the policies, then they are rejected.
Azure Policy for AKS sits on top of these two projects. It provides an interface for creating policies through the familiar Azure Policy interface, and reports on these policies in the Azure portal. Using the familiar Azure Policy UI and language for writing policies, you can apply requirements and restrictions to workloads that run inside AKS.
!! VVI Note: Azure Policy for AKS is in preview currently, and because of that, it is only supporting built-in policies currently. We can view these policies in policy definitions in the portal by filtering the list with “Kubernetes Service”. 
: Built-in policies in category Kubernetes are only for use with AKS Engine.
[ref:https://docs.microsoft.com/en-us/azure/governance/policy/concepts/aks-engine]

The current list of policies allows us to enforce some of the most common requirements for security in Kubernetes:
 - Ensure containers and/or services listen only on allowed ports
 - Enforce Labels on pods
 - Enforce HTTPS ingress
 - Ensure only allowed container images
 - Do not allow privileged containers
 - Ensure CPU and Memory limits are defined on all pods
 - Enforce internal load balancers
 - Enforce unique ingress hostnames across namespaces

Concepts:
- Azure Policy for AKS provides at-scale enforcement and safeguards for AKS clusters in a centralized, consistent manner.​
- Subscription is to be registered with the Microsoft.PolicyInsights resource provider  
- Azure Policy goes deeper into AKS, allowing us to set policies inside AKS clusters on pods, namespaces and ingress
- https://portal.azure.com/#blade/Microsoft_Azure_Policy/PolicyMenuBlade/JoinPreview <-- Here we can see whether the Subscription is registered for Preview Features
- "Gatekeeper v2", an admission controller webhook for Open Policy Agent (OPA) is used by Azure Policy to manage and report on the compliance state of our Azure
  resources and AKS clusters from one place.

VVI Note: Azure Policy for AKS is in Limited Preview and only supports built-in policy definitions.

How to create and implement policies with Azure AKS Policy?
To enable and use Azure Policy for AKS with our AKS cluster, take the following actions:
 - Opt-in for preview features
 - Install the Azure Policy Add-on
 - Assign a policy definition for AKS
 - Wait for validation
 
Opt-in for preview
Before installing the Azure Policy Add-on or enabling any of the service features, our subscription must enable the Microsoft.ContainerService resource provider and the Microsoft.PolicyInsights resource provider, then be approved to join the preview.
 - This can be done az commands as mentioned in "snippet.sh"
 
Azure Policy Add-on
 - The Azure Policy Add-on for Kubernetes connects the Azure Policy service to the Gatekeeper admission controller. The add-on, which is installed into the azure-policy namespace, enacts the following functions:
 - Checks with Azure Policy for assignments to the AKS cluster
 - Downloads and caches policy details, including the rego policy definition, as configmaps
 - Runs a full scan compliance check on the AKS cluster
 - Reports auditing and compliance details back to Azure Policy

#--> Loging to azure
 > az login
#--> Install the prerequisites  for the preview features
#--> Register AKS providers: 
> az provider register --namespace Microsoft.ContainerService
> az provider register --namespace Microsoft.PolicyInsights
#--> Feature register(ContainerService): Enable installing the add-on and confirm the feature is registered
> az feature register --namespace Microsoft.ContainerService --name AKS-AzurePolicyAutoApprove
> az feature list -o table --query "[?contains(name, 'Microsoft.ContainerService/AKS-AzurePolicyAutoApprove')].{Name:name,State:properties.state}"
#--> Once the above shows 'Registered' run the following to propagate the update
> az provider register -n Microsoft.ContainerService

#--> Feature register(PolicyInsights): Enable the add-on to call the Azure Policy resource provider and confirm the feature is registered
> az feature register --namespace Microsoft.PolicyInsights --name AKS-DataplaneAutoApprove
> az feature list -o table --query "[?contains(name, 'Microsoft.PolicyInsights/AKS-DataPlaneAutoApprove')].{Name:name,State:properties.state}"
#--> Once the above shows 'Registered' run the following to propagate the update
> az provider register -n Microsoft.PolicyInsights
#--> Install the prerequisites  for the Azure Policy Add-on 
> az extension show --name aks-preview --query [version]
[ "0.4.32" ]
> az extension update --name aks-preview
> az extension show --name aks-preview --query [version]
[  "0.4.33" ]

#--> Create an AKS cluster, "e.g.,: .\create-infrastructure-new.ps1 <username> <rg> <subscription> <location> <clustername> <nodecount> <k8s_version>"  
> .\Create-Linux-Cluster.ps1 "Itesh.Simlai@appliedis.com" "aks-az-policy-rg" "<Your-Subscription-Id>" "westeurope" "test-azaks-policy" 1 "1.15.7"
> az aks get-credentials -g "aks-az-policy-rg" -n "test-azaks-policy"  --overwrite
> az aks browse -g "aks-az-policy-rg" -n "test-azaks-policy"
> kubectl get nodes

- Once the prerequisites are completed, install the Azure Policy Add-on in the AKS cluster you want to manage
VVI Note: The following command is failing for me both from Local PS and Cloud Shell
> az aks enable-addons --name  "test-azaks-policy" --resource-group "aks-az-policy-rg" --addons azure-policy 
> Go to Azure Portal --> All services --> Kubernetes services --> Select Cluster "test-azaks-policy" --> Policies (preview) --> Click "Enable add on"
Note: Validation and reporting frequency


Follow the below steps:
- RG: "cluster-upgrade-blue-green-rg" Cluster Name: clust-upgrade
- Demo consists of two parts:
	A server that runs in cluster
	A client that runs locally
- Create a Cluster
	> .\Create-Linux-Cluster.ps1 
	> az aks get-credentials -g "cluster-upgrade-blue-green-rg" -n clust-upgrade  --overwrite
	> kubectl create clusterrolebinding kubernetes-dashboard --clusterrole=cluster-admin --serviceaccount=kube-system:kubernetes-dashboard
	> az aks browse -g "cluster-upgrade-blue-green-rg" -n clust-upgrade  

-  Deploy the application and expose it using type loadbalancer
	> kubectl apply  -f sample-app-v1.yaml
	> kubectl apply -f sample-app-svc.yaml
	> kubectl get pods -l app=sample-app-v1
-  Check if you got an external IP for your app
	> kubectl get svc sample-app-svc
-  Check if your app is running
	> http://51.137.12.8
	> kubectl get endpoints  sample-app-svc
- Check the upgrades available 
    > az aks get-upgrades -g "cluster-upgrade-blue-green-rg" -n clust-upgrade --output table
	> az aks get-upgrades -g "cluster-upgrade-blue-green-rg" -n clust-upgrade --output json
- Using nodepools in AKS, we can decouple the Control Plane upgrade from the nodes upgrade, and let's do it,
  VVI Note: The following command works only in Az Cloud Shell
    > az aks upgrade -g "cluster-upgrade-blue-green-rg" -n clust-upgrade -k 1.14.8 --control-plane-only
    Output:
		PS Azure:\> az aks upgrade -g "cluster-upgrade-blue-green-rg" -n clust-upgrade -k 1.14.8 --control-plane-only
		Kubernetes may be unavailable during cluster upgrades.
		Are you sure you want to perform this operation? (y/n): y
		Since control-plane-only argument is specified, this will upgrade only the control plane to 1.14.8. Node pool will not change. Continue? (y/N): y
		{
		  "aadProfile": null,
			... 
		  "type": "Microsoft.ContainerService/ManagedClusters",
		  "windowsProfile": null
		}
- Check the nodes
  > kubectl get nodes
    Output:
	NAME                                STATUS   ROLES   AGE   VERSION
	aks-nodepool1-34419880-vmss000000   Ready    agent   49m   v1.13.11
  > az aks nodepool add  --resource-group "cluster-upgrade-blue-green-rg" --cluster-name clust-upgrade  --name node1418  --node-count 1  --node-vm-size "Standard_B2s" --kubernetes-version 1.14.8		
  > kubectl get nodes
    Output:
		NAME                                STATUS   ROLES   AGE   VERSION
		aks-node1418-34419880-vmss000000    Ready    agent   14m   v1.14.8
		aks-nodepool1-34419880-vmss000000   Ready    agent   68m   v1.13.11
  > while true;do curl -I 51.137.12.8 2>/dev/null | head -n 1 | cut -d$' ' -f2;  done     <-- we can use PostMan as well
    Output:
		This will return 200 continuously
		
- Run the below command from a Bash Shell
  > kubectl apply -f sample-app-v2.yaml
  > kubectl get pods -o wide
    Notice two things,
	- All Pods are running 
	- Output in 
		This will return 200 continuously without any break
  > kubectl delete -f sample-app-v1.yaml	

Azure-AKS-Policy:
- az aks browse -g $env:rg -n $env:cn    

docker tag  nginx:1.7.9  democncfarchacr.azurecr.io/nginx:1.7.9
docker push democncfarchacr.azurecr.io/nginx:1.7.9
   not re_match("^democncfarchacr\.azurecr\.io\/.+$", container.image) -- PS
   Create Assignment via portal at 18:04:30
  
Cleanup: 
> az aks disable-addons --addons azure-policy --name MyAKSCluster --resource-group MyResourceGroup 
